Type something to be parsed, or `System helpMe' for on-line help:
$ >>> ParseError: Cannot reassign that variable, it is reserved.
$ >>> true
$ >>> false
$ >>> true
$ >>> false
$ >>> false
$ >>> true
$ >>> nil
$ >>> true
$ >>> false
$ >>> true
$ >>> false
$ >>> true
$ >>> false
$ >>> false
$ >>> false
$ >>> true
$ >>> false
$ >>> false
$ >>> true
$ >>> ParseError: Cannot reassign that variable, it is reserved.
$ >>> 3.3
$ >>> true
$ >>> ModelIdentifier
$ >>> Model Identifier 'uhp' which refers to the Poincare Upper Half Plane
$ >>> Model Identifier 'pd' which refers to the Poincare Disk
$ >>> Model Identifier 'kd' which refers to the Beltrami-Klein Disk
$ >>> ParseError: Cannot reassign that variable, it is reserved.
$ >>> 3.3
$ >>> ModelIdentifier
$ >>> ParseError: unknown keyword message
$ >>> ParseError: `m:', keyword number 3, requires an argument of type ``ModelIdentifier object instance''
$ >>> Point(x: 3.3, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 3.3, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 3.3, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 3.3, y: 4.7, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.065958
$ >>> Point(x: 0.3, y: 0.3, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: -0.3, y: -0.3, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> ParseError: parse error
$ >>> Point(x: 0, y: 0, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> ParseError: unknown unary message
$ >>> ParseError: unknown keyword message
$ >>> true
$ >>> false
$ >>> Point(x: 3.3, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.1
$ >>> Point(x: 3.3, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.1
$ >>> Point(x: 0.1, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 3.3, y: 4.4, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ $ >>> ParseError: receiver is read-only
$ >>> Model Identifier 'P ' which refers to no valid model
$ >>> true
$ >>> false
$ >>> ParseError: unknown unary message
$ >>> true
$ >>> ParseError: unknown unary message
$ >>> false
$ >>> Color(RGB=[0.3, 0.5, 0.7])
$ >>> 0.3
$ >>> 0.5
$ >>> 0.7
$ >>> 210
$ >>> 0.571429
$ >>> 0.7
$ >>> Color(RGB=[0.3, 0.5, 0.7])
$ >>> Color(RGB=[0.4, 0.5, 0.1])
$ >>> Color(RGB=[0.4, 0.5, 0.1])
$ >>> 'Color'
$ >>> 'Number class'
$ >>> ParseError: There is no super-class; this is the root of the class hierarchy
$ >>> Model Identifier 'poincare upper h' which refers to the Poincare Upper Half Plane
$ >>> Model Identifier 'poincare_upper' which refers to the Poincare Upper Half Plane
$ >>> Model Identifier 'poincare-upper' which refers to the Poincare Upper Half Plane
$ >>> Model Identifier 'poincare' which refers to no valid model
$ >>> 'Symbol'
$ >>> 'CharacterArray class'
$ >>> 'Symbol class'
$ >>> 'CharacterArray class'
$ >>> Color(RGB=[0, 0, 0])
$ >>> true
$ >>> true
$ >>> true
$ >>> true
$ >>> false
$ >>> false
$ >>> true
$ >>> #( 3 4 5 #hi )
$ >>> #( )
$ >>> 'first'
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> #BRESENHAM
$ >>> #B
$ >>> ParseError: You can set a String to a Symbol, but not vice versa
$ >>> ParseError: unknown unary message
$ >>> 'hi'
$ >>> 'ss'
$ >>> 2
$ >>> 0
$ >>> ParseError: Scanner error -- Unrecognized character
$ >>> 1
$ >>> ParseError: Scanner error -- Unrecognized character
$ >>> ParseError: Scanner error -- Unrecognized character
$ >>> 5
$ >>> true
$ >>> false
$ >>> false
$ >>> ParseError: receiver is read-only
$ >>> ParseError: `set:', keyword number 1, requires an argument of type ``Number object instance''
$ >>> 4.4
$ >>> 2.2
$ >>> 2.2
$ >>> ParseError: receiver is read-only
$ >>> Model Identifier 'pd' which refers to the Poincare Disk
$ >>> #j
$ >>> ParseError: You can set a String to a Symbol, but not vice versa
$ >>> true
$ >>> true
$ >>> 2
$ >>> #hi
$ >>> #hi
$ >>> #( #a1 #a2 #a3 )
$ >>> #a1
$ >>> ParseError: `at:', keyword number 1, requires an argument of type ``SmallInt object instance''
$ >>> #a1
$ >>> #a3
$ >>> ParseError: not yet implemented, should grow I guess -- I need an integer class first.
$ >>> 'wow'
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Color(RGB=[0, 1, 0.3])
$ >>> #BRESENHAM
$ >>> Color(RGB=[0.1, 0.3, 0.44])
$ >>> Drawable -- Color(RGB=[0.1, 0.3, 0.44]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 1
$ >>> 2.5
$ >>> Drawable -- Color(RGB=[0.1, 0.3, 0.44]), garnishing on, thickness 2.5, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.0015
$ >>> Drawable -- Color(RGB=[0.1, 0.3, 0.44]), garnishing on, thickness 2.5, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.001
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.001, drawing method #BRESENHAM
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.36
$ >>> 0.37
$ >>> 0.39
$ >>> Point(x: 0.36, y: 0.39, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> ParseError: unknown unary message
$ >>> Model Identifier 'uhp' which refers to the Poincare Upper Half Plane
$ >>> Model Identifier 'kd' which refers to the Beltrami-Klein Disk
$ >>> Point(x: 0.36, y: 0.39, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.36
$ >>> 0.39
$ >>> -0.1
$ >>> Model Identifier 'uhp' which refers to the Poincare Upper Half Plane
$ >>> Point(x: 0.36, y: -0.1, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 'that was truncated as it should have been'
$ >>> 'This is the Smalltalk-80-ish system that GPLconx uses to give you incredible expressive power (um, one day...).  The system's documentation is in the Texinfo document that you'll find bundled with the source, which is freely available since GPLconx is GPL'ed.  To get up to speed more quickly, download and check out GNU Smalltalk, which is full-featured and better-documented.
Another good source of help is by typing `Object help', or `System help', or `2 help', or `0.3 help', e.g.  This gives you information about the class of the receiver, such as which methods work.  There are no binary methods in this system, and you cannot extend it unless you alter the C++ source code.'
$ >>> '#Object subclass:  #Boolean

Object comment:
'I am a Boolean value, i.e. I am either true or false.'

Class methods:

	true (instance creation) -- Returns a new object instance that represents truth.  The system predefines such an instance and assigns it to the variable `true'; you will benefit from increased efficiency if you just use `true'.
	false (instance creation) -- Returns a new object instance that represents falsehood.  The system predefines such an instance and assigns it to the variable `false'; you will benefit from increased efficiency if you just use `false'


Instance methods:
	not (Boolean arithmetic) -- Returns a Boolean object instance whose truth value is the opposite of the receiver
	and: (Boolean arithmetic) -- Returns true iff the reciever and the Boolean argument are both true
	or: (Boolean arithmetic) -- Returns true iff either the reciever or the Boolean argument is true
	xor: (Boolean arithmetic) -- Returns true iff either the reciever or the Boolean argument is true but both are not
'
$ >>> 'nil subclass:  #Object

Object comment:
'I am the root of the GPLconx class hierarchy.  All other classes are derived from me.'

Class methods:

	respondsTo: (testing functionality) -- Returns true if the receiver responds to the message, which is represented by a #symbol or #symbol:like:this:
	invoke: (method invocation) -- Invokes on behalf of the receiver the unary method that has that name.  This indirection may prove useful in writing scripts.
	invoke:passing: (method invocation) -- Invokes on behalf of the receiver the method that has that name.  The arguments are in the Array object instance that is the argument to #passing; its size and the number of keywords in the method name must match.  This indirection may prove useful in writing scripts.
	superClass (metaclasses) -- Returns the class from which the receiver is derived
	class (metaclasses) -- Returns the class of which the receiver is a class instance
	printString (printing) -- Returns a human-readable String object instance representation
	isClass (testing functionality) -- Returns true if the receiver is a class instance rather than an object instance
	clone (instance creation) -- Returns an identical copy of the receiver (not the receiver itself) that shares any contents if the receiver is a container
	help (help) -- Returns help on using the receiver
	isNil (testing functionality) -- Returns true if the receiver isNil
	notNil (testing functionality) -- Returns true if the receiver is notNil
	isFloat (testing functionality) -- Returns true if the receiver isFloat
	notFloat (testing functionality) -- Returns true if the receiver is notFloat
	isSymbol (testing functionality) -- Returns true if the receiver isSymbol
	notSymbol (testing functionality) -- Returns true if the receiver is notSymbol
	isString (testing functionality) -- Returns true if the receiver isString
	notString (testing functionality) -- Returns true if the receiver is notString
	isParseError (testing functionality) -- Returns true if the receiver isParseError
	notParseError (testing functionality) -- Returns true if the receiver is notParseError
	isModelIdentifier (testing functionality) -- Returns true if the receiver isModelIdentifier
	notModelIdentifier (testing functionality) -- Returns true if the receiver is notModelIdentifier
	isColor (testing functionality) -- Returns true if the receiver isColor
	notColor (testing functionality) -- Returns true if the receiver is notColor
	isCharacterArray (testing functionality) -- Returns true if the receiver isCharacterArray
	notCharacterArray (testing functionality) -- Returns true if the receiver is notCharacterArray
	isArray (testing functionality) -- Returns true if the receiver isArray
	notArray (testing functionality) -- Returns true if the receiver is notArray
	isSmallInt (testing functionality) -- Returns true if the receiver isSmallInt
	notSmallInt (testing functionality) -- Returns true if the receiver is notSmallInt
	isDrawable (testing functionality) -- Returns true if the receiver isDrawable
	notDrawable (testing functionality) -- Returns true if the receiver is notDrawable
	isNumber (testing functionality) -- Returns true if the receiver isNumber
	notNumber (testing functionality) -- Returns true if the receiver is notNumber
	isSystem (testing functionality) -- Returns true if the receiver isSystem
	notSystem (testing functionality) -- Returns true if the receiver is notSystem
	isCanvas (testing functionality) -- Returns true if the receiver isCanvas
	notCanvas (testing functionality) -- Returns true if the receiver is notCanvas
	isLine (testing functionality) -- Returns true if the receiver isLine
	notLine (testing functionality) -- Returns true if the receiver is notLine
	isCircle (testing functionality) -- Returns true if the receiver isCircle
	notCircle (testing functionality) -- Returns true if the receiver is notCircle
	isPoint (testing functionality) -- Returns true if the receiver isPoint
	notPoint (testing functionality) -- Returns true if the receiver is notPoint
	isParabola (testing functionality) -- Returns true if the receiver isParabola
	notParabola (testing functionality) -- Returns true if the receiver is notParabola
	isHypEllipse (testing functionality) -- Returns true if the receiver isHypEllipse
	notHypEllipse (testing functionality) -- Returns true if the receiver is notHypEllipse
	isEqDistCurve (testing functionality) -- Returns true if the receiver isEqDistCurve
	notEqDistCurve (testing functionality) -- Returns true if the receiver is notEqDistCurve


Instance methods:
	makeReadOnly (setting) -- Makes the object instance read-only; if the object is a container, such as Array, Canvas, Drawable, Point, Line, etc., then the contents become read-only also.  This is irreversible and comes with some performance advantages.  Clone a read-only object to get a read-write equivalent
	dependsOn: (Private) -- Returns true if the receiver is a container that contains the argument or an object that contains the argument
	respondsTo: (testing functionality) -- Returns true if the receiver responds to the message, which is represented by a #symbol or #symbol:like:this:
	invoke: (method invocation) -- Invokes on behalf of the receiver the unary method that has that name.  This indirection may prove useful in writing scripts.
	invoke:passing: (method invocation) -- Invokes on behalf of the receiver the method that has that name.  The arguments are in the Array object instance that is the argument to #passing; its size and the number of keywords in the method name must match.  This indirection may prove useful in writing scripts.
	isReadOnly (setting) -- Returns a Boolean to indicate the receiver's read-only status
	superClass (metaclasses) -- Returns the class from which the receiver is derived
	class (metaclasses) -- Returns the class of which the receiver is an object instance
	printString (printing) -- Returns a human-readable String object instance representation
	isClass (testing functionality) -- Returns true if the receiver is a class instance rather than an object instance
	cloneDeep (instance creation) -- Returns a copy of the receiver with, in the case or containers, all contents replaced by cloneDeep copies
	clone (instance creation) -- Returns an identical copy of the receiver (not the receiver itself) that shares any contents if the receiver is a container
	exactlyEquals: (instance creation) -- Returns true iff the receiver is precisely the same object instance as the argument (iff the pointers are equal, for you C folk)
	set: (setting) -- Sets the receiver's value to a copy of the argument's value
	help (help) -- Returns help on using the receiver
	isNil (testing functionality) -- Returns true if the receiver isNil
	notNil (testing functionality) -- Returns true if the receiver is notNil
	isFloat (testing functionality) -- Returns true if the receiver isFloat
	notFloat (testing functionality) -- Returns true if the receiver is notFloat
	isSymbol (testing functionality) -- Returns true if the receiver isSymbol
	notSymbol (testing functionality) -- Returns true if the receiver is notSymbol
	isString (testing functionality) -- Returns true if the receiver isString
	notString (testing functionality) -- Returns true if the receiver is notString
	isParseError (testing functionality) -- Returns true if the receiver isParseError
	notParseError (testing functionality) -- Returns true if the receiver is notParseError
	isModelIdentifier (testing functionality) -- Returns true if the receiver isModelIdentifier
	notModelIdentifier (testing functionality) -- Returns true if the receiver is notModelIdentifier
	isColor (testing functionality) -- Returns true if the receiver isColor
	notColor (testing functionality) -- Returns true if the receiver is notColor
	isCharacterArray (testing functionality) -- Returns true if the receiver isCharacterArray
	notCharacterArray (testing functionality) -- Returns true if the receiver is notCharacterArray
	isArray (testing functionality) -- Returns true if the receiver isArray
	notArray (testing functionality) -- Returns true if the receiver is notArray
	isSmallInt (testing functionality) -- Returns true if the receiver isSmallInt
	notSmallInt (testing functionality) -- Returns true if the receiver is notSmallInt
	isDrawable (testing functionality) -- Returns true if the receiver isDrawable
	notDrawable (testing functionality) -- Returns true if the receiver is notDrawable
	isNumber (testing functionality) -- Returns true if the receiver isNumber
	notNumber (testing functionality) -- Returns true if the receiver is notNumber
	isSystem (testing functionality) -- Returns true if the receiver isSystem
	notSystem (testing functionality) -- Returns true if the receiver is notSystem
	isCanvas (testing functionality) -- Returns true if the receiver isCanvas
	notCanvas (testing functionality) -- Returns true if the receiver is notCanvas
	isLine (testing functionality) -- Returns true if the receiver isLine
	notLine (testing functionality) -- Returns true if the receiver is notLine
	isCircle (testing functionality) -- Returns true if the receiver isCircle
	notCircle (testing functionality) -- Returns true if the receiver is notCircle
	isPoint (testing functionality) -- Returns true if the receiver isPoint
	notPoint (testing functionality) -- Returns true if the receiver is notPoint
	isParabola (testing functionality) -- Returns true if the receiver isParabola
	notParabola (testing functionality) -- Returns true if the receiver is notParabola
	isHypEllipse (testing functionality) -- Returns true if the receiver isHypEllipse
	notHypEllipse (testing functionality) -- Returns true if the receiver is notHypEllipse
	isEqDistCurve (testing functionality) -- Returns true if the receiver isEqDistCurve
	notEqDistCurve (testing functionality) -- Returns true if the receiver is notEqDistCurve
'
$ >>> Point(x: 0.36, y: -0.1, model: uhp) -- Drawable -- Color(RGB=[0.1, 0.9, 0.512]), garnishing on, thickness 3, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> true
$ >>> true
$ >>> false
$ >>> true
$ >>> true
$ >>> false
$ >>> true
$ >>> false
$ >>> true
$ >>> false
$ >>> true
$ >>> Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.4
$ >>> Point(x: 0.4, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.4
$ >>> 0.4
$ >>> Point(x: 0.21, y: 0.22, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.225
$ >>> Point(x: 0.21, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> #( Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM Point(x: 0.21, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM )
$ >>> 0.212
$ >>> Point(x: 0.212, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> #( Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM Point(x: 0.212, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM )
$ >>> ParseError: receiver is read-only
$ >>> Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> ParseError: receiver is read-only
$ >>> 0.3
$ >>> ParseError: receiver is read-only
$ >>> ParseError: receiver is read-only
$ >>> Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> ParseError: receiver is read-only
$ >>> false
$ >>> true
$ >>> ParseError: receiver is read-only
$ >>> Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.3
$ >>> 4.34
$ >>> Point(x: 4.34, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> #( Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM Point(x: 0.212, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM )
$ >>> Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> true
$ >>> ParseError: receiver is read-only
$ >>> ParseError: receiver is read-only
$ >>> nil
$ >>> #( Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM Point(x: 0.212, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM )
$ >>> true
$ >>> #( Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM Point(x: 0.212, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM )
$ >>> true
$ >>> false
$ >>> true
$ >>> false
$ >>> #( Point(x: 0.3, y: 0.301, model: kd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM Point(x: 0.212, y: 0.225, model: pd) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM )
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.39
$ >>> Point(x: 0.39, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.39, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 2.2
$ >>> 2.2
$ >>> 2.2
$ >>> #( 2.2 )
$ >>> #( 2.2 )
$ >>> #( 2.2 )
$ >>> ParseError: `put:', keyword number 2, requires an argument of type ``Drawable object instance''
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> ParseError: This object instance is not tied to any canvas.
$ >>> Canvas(0 Drawable object instances, 3 entries)
$ >>> Canvas(0 Drawable object instances, 3 entries)
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Canvas(0 Drawable object instances, 3 entries)
$ >>> true
$ >>> Canvas(0 Drawable object instances, 3 entries)
$ >>> false
$ >>> Canvas(0 Drawable object instances, 0 entries)
$ >>> ParseError: This object instance is not tied to any canvas.
$ >>> #( )
$ >>> #justice
$ >>> #( #justice #number2 #plum )
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.3, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.3, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> 0.3
$ >>> #( 0.3 0.4 )
$ >>> 0.2
$ >>> 0.5
$ >>> #( 0.2 0.3 0.4 0.5 )
$ >>> 0.5
$ >>> 0.5
$ >>> 0.2
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1.3, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1.3, slow drawing method tolerance 0.005, drawing method #BRESENHAM
$ >>> Drawable -- Color(RGB=[0, 0, 0]), garnishing on, thickness 1.3, slow drawing method tolerance 0.005, drawing method #BRESENHAM
$ >>> Drawable -- Color(RGB=[0, 0, 0]), garnishing on, thickness 1.3, slow drawing method tolerance 0.005, drawing method #longway
$ >>> #longway
$ >>> #bresenham
$ >>> #bresenham
$ >>> Drawable -- Color(RGB=[0, 0, 0]), garnishing on, thickness 1.3, slow drawing method tolerance 0.005, drawing method #longway
$ >>> #longway
$ >>> Drawable -- Color(RGB=[0, 0, 0]), garnishing on, thickness 1.3, slow drawing method tolerance 0.005, drawing method #bresenham
$ >>> #longway
$ >>> #bresenham
$ >>> #bresenham
$ >>> Parabola(Focus: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, line: Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Parabola(Focus: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, line: Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Parabola(Focus: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, line: Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Parabola(Focus: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, line: Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> Line(A: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM, B: Point(x: 0.36, y: 0.37, model: uhp) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM) -- Drawable -- Color(RGB=[0, 1, 0.3]), garnishing on, thickness 1, slow drawing method tolerance 0.0015, drawing method #BRESENHAM
$ >>> true
$ >>> '#Number subclass:  #Float

Object comment:
'I am a floating-point number.'

Class methods:

	randomBetween:and: (instance creation) -- Returns a random number in the given interval
	Pi (constants) -- Returns a new object instance, Pi, the circumference of a circle with radius 1
	e (constants) -- Returns a new object instance, e, the base of the natural logarithm


Instance methods:
	between:and: (math) -- Returns true iff the inclusive range from the first argument to the second argument contains the receiver
	set: (superclass method implementation) -- Sets the receiver's value to the argument's floating-point value, coercing if possible (from a SmallInt, e.g.)
	exp (math) -- Returns e to the receiver's power, the anti-natural-logarithm
	ln (math) -- Returns the natural logarithm of the receiver
	log10 (math) -- Returns the common (base 10) logarithm of the receiver
	sin (math) -- Returns the sine of the receiver
	cos (math) -- Returns the cosine of the receiver
	tan (math) -- Returns the tangent of the receiver
	plus: (math) -- Returns the sum of the receiver and argument
	+: (math) -- Returns the sum of the receiver and argument
	minus: (math) -- Returns difference between the receiver and argument
	times: (math) -- Returns the product of the receiver and argument
	dividedBy: (math) -- Returns the receiver divided by the argument
	raisedTo: (math) -- Returns the receiver raised to the power of the argument
	negation (math) -- Returns the negation of the receiver
	reciprocal (math) -- Returns the reciprocal of the receiver
	gt: (comparison) -- Returns true if the receiver is greater than the argument
	lt: (comparison) -- Returns true if the receiver is less than the argument
	gte: (comparison) -- Returns true if the receiver is greater than or equal to the argument
	lte: (comparison) -- Returns true if the receiver is less than or equal to the argument
	sqrt (math) -- Returns the square root of the receiver
'
$ >>> '#Object subclass:  #Number

Object comment:
'I am a number.'

Class methods:



Instance methods:
	asFloat (coercion) -- Returns a Float object instance version of the receiver
'
$ >>> '#Drawable subclass:  #Point

Object comment:
'I am a point in hyperbolic geometry.  I know how to draw myself.'

Class methods:

	new (instance creation) -- Returns a new object instance of a 2-D point in Hyperbolic geometry that can draw itself on a Canvas
	random: (instance creation) -- Returns a new point randomly distributed in the Klein disk's Euclidean counterpart with Euclidean distance from (0, 0) less than the argument (maximum of 1.0 since the unit disk is at infinity) -- this has a random Euclidean radius, but the hyperbolic distance from hyperbolic (0, 0) is more likely to be small, i.e. it is not a random hyperbolic distance from (0, 0), because that would skew the points toward the edge of the disk, which is not a great idea for visualization.
	random (instance creation) -- Returns what `random: 1.0' does
	x:y:model: (instance creation) -- Returns a new, set object instance of a 2-D point in Hyperbolic geometry that can draw itself on a Canvas
	x:y:m: (instance creation) -- Returns a new, set object instance of a 2-D point in Hyperbolic geometry that can draw itself on a Canvas


Instance methods:
	distanceFromPoint: (hyperbolic geometry calculations) -- Returns the distance between the receiver and the Point object instance argument
	betweenColinearPoint:andOtherColinearPoint: (hyperbolic geometry calculations) -- Returns true iff the receiver lies between two Point object instance arguments on the hyperbolic geometry line upon which the three Points are assumed to be colinear
	x (getting) -- Returns the x
	y (getting) -- Returns the y
	model (getting) -- Returns the model
	x: (setting) -- Sets the `x:' field; returns the receiver
	y: (setting) -- Sets the `y:' field; returns the receiver
	model: (setting) -- Sets the `model:' field; returns the receiver
'
$ >>> '#Drawable subclass:  #Parabola

Object comment:
'I am a parabola in hyperbolic geometry.  I know how to draw myself.'

Class methods:

	new (instance creation) -- Returns a new object instance of a parabola in Hyperbolic geometry that can draw itself on a Canvas
	focus:line: (instance creation) -- Returns a new, set object instance of a parabola in Hyperbolic geometry that can draw itself on a Canvas


Instance methods:
	focus (getting) -- Returns the focus
	line (getting) -- Returns the line
	focus: (setting) -- Sets the `focus:' field; returns the receiver
	line: (setting) -- Sets the `line:' field; returns the receiver
'
$ >>> '#Drawable subclass:  #Line

Object comment:
'I am a line in hyperbolic geometry.  I know how to draw myself.'

Class methods:

	new (instance creation) -- Returns a new object instance of a line in Hyperbolic geometry that can draw itself on a Canvas
	A:B:isSegment: (instance creation) -- Returns a new, set object instance of a 2-D line in Hyperbolic geometry that can draw itself on a Canvas
	random: (instance creation) -- Returns a new 2-D line in Hyperbolic geometry with two ``random'' Points with Euclidean Klein Disk radius less than the argument (see help for `Point random:')
	random (instance creation) -- Returns a new 2-D line in Hyperbolic geometry with two ``random'' Points (see help for `Point random')


Instance methods:
	A (getting) -- Returns the A
	B (getting) -- Returns the B
	isSegment (getting) -- Returns the isSegment
	A: (setting) -- Sets the `A:' field; returns the receiver
	B: (setting) -- Sets the `B:' field; returns the receiver
	isSegment: (setting) -- Sets the `isSegment:' field; returns the receiver
'
$ >>> '#Drawable subclass:  #Circle

Object comment:
'I am a circle in hyperbolic geometry.  I know how to draw myself.'

Class methods:

	new (instance creation) -- Returns a new object instance of a circle in Hyperbolic geometry that can draw itself on a Canvas
	center:radius: (instance creation) -- Returns a new, set object instance of a circle in Hyperbolic geometry that can draw itself on a Canvas


Instance methods:
	center (getting) -- Returns the center
	radius (getting) -- Returns the radius
	center: (setting) -- Sets the `center:' field; returns the receiver
	radius: (setting) -- Sets the `radius:' field; returns the receiver
'
$ >>> true
$ >>> true
$ >>> false
$ >>> true
$ >>> -3.3
$ >>> 0.30303
$ >>> 10
$ >>> 10.1
$ >>> 0
$ >>> 0
$ >>> true
$ >>> false
$ >>> false
$ >>> false
$ >>> true
$ >>> true
$ >>> 3.14159
$ >>> ParseError: unknown unary message
$ >>> ParseError: #invoke: cannot invoke itself; picture a dragon eating its own tail
$ >>> 2
$ >>> 1
$ >>> 0
$ >>> 2
$ >>> #a
$ >>> #b
$ >>> ParseError: Must be less than or equal to `self numberKeywords'
$ >>> #
$ >>> ParseError: Scanner error -- Unrecognized character
$ >>> ParseError: unknown keyword message
$ >>> true
$ >>> ParseError: `and:', keyword number 2, requires an argument of type ``Number object instance''
$ >>> false
$ >>> #( 3.3 )
$ >>> true
$ >>> false
$ >>> #( 3.1 3.1e-13 1e+09 4e+09 )
$ >>> #( 1.3e+09 -3.3 -2e+13 )
$ >>> ParseError: Scanner error -- #Literal is too long.
$ >>> ParseError: Scanner error -- ID is too long.
$ >>> 5
$ >>> 9
$ >>> 81
$ 